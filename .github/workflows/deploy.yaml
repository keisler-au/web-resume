name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Cache Docker layers
        id: cache-docker
        uses: actions/cache@v3
        with:
          path: ~/.cache/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Production Docker images
        run: |
          echo ${{ secrets.HOST_USER_EMAIL }}
          echo "ENV=Production" > backend/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> backend/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> backend/.env
          echo "HOST_USER_EMAIL="${{ secrets.HOST_USER_EMAIL }}"" >> backend/.env
          echo "MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }}" >> backend/.env
          echo "MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }}" >> backend/.env

          echo "DOCKER_ID=${{ secrets.DOCKER_ID }}" > .env

          docker compose -f compose.yaml -f production.yaml build

      # - name: Run Backend Tests
      #   run: docker compose run --rm backend python manage.py test

      # - name: Run Frontend Tests
      #   run: |
      #     docker build --target build -t frontend-tests ./frontend
      #     docker run --rm frontend-tests npm test /src/tests/Contact.test.tsx -- --watchAll=false

      - name: Push Docker images to Docker Hub
        run: |
          docker compose -f compose.yaml -f production.yaml push

  deploy-to-vps:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: SSH to VPS and deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_IP_ADDRESS }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/web-resume
            git pull origin main
            sudo docker-compose -f compose.yaml -f production.yaml pull
            sudo docker-compose -f compose.yaml -f production.yaml up -d
            sudo docker-compose run backend python manage.py migrate
            sudo docker system prune -f
