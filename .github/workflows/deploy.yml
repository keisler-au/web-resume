name: CI/CD Pipeline for AWS

on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Containers
        run: |
          echo "POSTGRES_PASSWORD=admin" > backend/.env
          docker compose up -d --build

      - name: Run Backend Tests
        run: docker compose exec backend python manage.py test

      - name: Run Frontend Tests
        run: docker compose exec frontend npm test -- --silent --watchAll=false

  deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-and-test  # Ensures this job only runs if build-and-test succeeds
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.DOCKER_REPO_BACKEND }}
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.DOCKER_REPO_FRONTEND }}

      - name: Push Backend Docker Image to ECR
        run: |
          docker tag backend:latest ${{ secrets.DOCKER_REPO_BACKEND }}:latest
          docker push ${{ secrets.DOCKER_REPO_BACKEND }}:latest

      - name: Push Frontend Docker Image to ECR
        run: |
          docker tag frontend:latest ${{ secrets.DOCKER_REPO_FRONTEND }}:latest
          docker push ${{ secrets.DOCKER_REPO_FRONTEND }}:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster app-cluster --service backend-service --force-new-deployment
          aws ecs update-service --cluster app-cluster --service frontend-service --force-new-deployment
