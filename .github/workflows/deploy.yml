name: CI/CD Pipeline for AWS

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Development Images
        run: |
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > backend/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> backend/.env
          echo "HOST_USER_EMAIL=${{ secrets.HOST_USER_EMAIL }}" >> backend/.env
          docker compose build

      - name: Run Backend Tests
        run: docker compose run backend python manage.py test

      - name: Run Frontend Tests
        run: docker compose run frontend npm test -- --silent --watchAll=false

  deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Production Containers
        run: docker

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-north-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.DOCKER_REPO_BACKEND }}
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.DOCKER_REPO_FRONTEND }}

      - name: Push Docker Images to ECR
        run: |
          docker build -f backend/Dockerfile --target production -t ${{ secrets.DOCKER_REPO_BACKEND }}:latest ./backend
          docker build -f frontend/Dockerfile --target production -t ${{ secrets.DOCKER_REPO_FRONTEND }}:latest ./frontend
          docker push ${{ secrets.DOCKER_REPO_BACKEND }}:latest
          docker push ${{ secrets.DOCKER_REPO_FRONTEND }}:latest

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-north-1

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster app-cluster --service backend --force-new-deployment
          aws ecs update-service --cluster app-cluster --service frontend --force-new-deployment
