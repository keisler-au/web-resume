name: CI/CD Pipeline for AWS

on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15.4-alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d test_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Build Stages
      # - name: Build Containers from Docker-Compose
      #   run: |
      #     echo "DB_NAME=postgres" > backend/.env
      #     echo "DB_USER=postgres" >> backend/.env
      #     echo "DB_PASSWORD=admin" >> backend/.env
      #     echo "DB_HOST=db" >> backend/.env
      #     docker compose -f docker-compose.yml up -d

      - name: Build Backend Docker Image
        run: docker build -t backend ./backend

      - name: Build Frontend Docker Image
        run: docker build -t frontend ./frontend

      - name: Capture network name
        id: network
        run: |
          NETWORK_NAME=$(docker network ls --filter "driver=bridge" --filter "scope=local" --format "{{.Name}}" | grep -m 1 'act-' || echo "")
          if [ -z "$NETWORK_NAME" ]; then
            echo "No act-related network found. Available networks:"
            docker network ls
            exit 1
          fi
          echo "NETWORK_NAME=$NETWORK_NAME" >> $GITHUB_ENV

      - name: Run Backend Tests
        env:
          DB_NAME: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost  # Change to 'localhost' since we're using 'localhost' in the backend
        run: |
          docker run --rm --network=$NETWORK_NAME backend python manage.py test

      # Tests Stage
      # - name: Run Backend Tests
      #   run: docker compose exec backend python manage.py test

      # - name: Run Frontend Tests
      #   run: docker compose exec frontend npm test -- --silent --watchAll=false

  deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-and-test  # Ensures this job only runs if build-and-test succeeds
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.DOCKER_REPO_BACKEND }}
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.DOCKER_REPO_FRONTEND }}

      - name: Push Backend Docker Image to ECR
        run: |
          docker tag backend:latest ${{ secrets.DOCKER_REPO_BACKEND }}:latest
          docker push ${{ secrets.DOCKER_REPO_BACKEND }}:latest

      - name: Push Frontend Docker Image to ECR
        run: |
          docker tag frontend:latest ${{ secrets.DOCKER_REPO_FRONTEND }}:latest
          docker push ${{ secrets.DOCKER_REPO_FRONTEND }}:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster app-cluster --service backend-service --force-new-deployment
          aws ecs update-service --cluster app-cluster --service frontend-service --force-new-deployment
